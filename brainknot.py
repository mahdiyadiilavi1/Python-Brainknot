def find_loc(code, char, index, start, end, reversed=False):
    late = code[index+1:]
    matching = 0
    i = 0
    cond = True
    if reversed:
        late = code[:index]
        i = len(late) - 1
    while cond:
        char2 = late[i]
        if matching == 0 and char2 == char:
            if not reversed:
                return index + i + 1
            else:
                return i
        if char2 == start:
            matching += 1
        if char2 == end:
            matching -= 1
        if reversed:
            i -= 1
        else:
            i += 1
        cond = ((i < len(late)) and not reversed) or ((i >= 0) and reversed)
    else:
        print('Error!')
        return len(code)-1 if not reversed else 0
        



def brainknot(code, input_data):
  """
  Interprets Brainknot code (Version 1 & 2)

  Args:
    code: The Brainknot program code.
    input_data: The input data for the program.

  Returns:
    The output generated by the program.
  """

  # Initialize stacks for input, output, and main memory
  input_stack = list(input_data)
  output_stack = []
  memory_stack = [0] * 30000  # Adjust stack size as needed

  # Current memory pointer and bit
  mem_ptr = 0
  current_bit = 0
  code_index = 0
  while code_index < len(code):
    char = code[code_index]
    # print(f'\n{code[:code_index]}  {char}  {code[code_index+1:]}\n')
    if char == '>':
      # Input: Pop from input stack and set current bit
      if input_stack:
        current_bit = int(input_stack.pop(0))
    elif char == '<':
      # Output: Push current bit to output stack
      output_stack.append(str(current_bit))
    elif char == '-':
      # Pop from main stack and set current bit
      if mem_ptr >= 1:
          current_bit = memory_stack[mem_ptr]
          memory_stack[mem_ptr] = 0
          mem_ptr -= 1
      else:
          current_bit = 0
          # end the loop
          char = '.'
    elif char == '+':
      # Push current bit to main stack
      memory_stack[mem_ptr] = current_bit
      mem_ptr += 1
    elif char == '*':
      # Flip current bit
      current_bit = 1 - current_bit
    elif char == '[':
      # If statement
      if not current_bit:
          # find comma
          x = find_loc(code, ',', code_index, '[', ']')
          if x is None:
            # if couldn't find comma, find closed bracket
            code_index = find_loc(code, ']', code_index, '[', ']')
          else:
            code_index = x
    elif char == ',':
      code_index = find_loc(code, ']', code_index, '[', ']')
    elif char == ']':
      # End of if statement
      pass
    elif char == '(':
      # Loop start
      if not current_bit:
          # if loop shouldn't start goto loop end
          code_index = find_loc(code, ')', code_index, '(', ')') 
    elif char == ')':
      # Loop end
      if current_bit:
        # if loop is at end come back to start
        code_index = find_loc(code, '(', code_index, '(', ')', True)
    elif char == '.':
      # Break loop (version 2)
      code_index = find_loc(code, ')', code_index, '(', ')') 
    code_index += 1
    # print(current_bit,"\n")
  return ''.join([str(b) for b in output_stack])

def main():
  while True:
    code = input('Code: ')
    if code == 'exit':
      return 0
    input_data = input('Input: ')
    output = brainknot(code, input_data)
    print('Output:',output)

if __name__ == '__main__':
    main()